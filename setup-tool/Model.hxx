// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef MODEL_HXX
#define MODEL_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace damaris
{
  namespace model
  {
    class DeprecatedClients;
    class DeprecatedCores;
    class KeyVal;
    class Dedicated;
    class Domains;
    class ShmType;
    class Buffer;
    class Queue;
    class Architecture;
    class Language;
    class Type;
    class Layout;
    class VarType;
    class VarCentering;
    class Variable;
    class Group;
    class Parameter;
    class MeshType;
    class Coord;
    class Mesh;
    class Curve;
    class Data;
    class Scope;
    class Exec;
    class Event;
    class Script;
    class Exception;
    class VisitParam;
    class PythonParam;
    class Actions;
    class StoreType;
    class Store;
    class Storage;
    class LogLevelType;
    class Log;
    class Simulation;
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace damaris
{
  namespace model
  {
    class DeprecatedClients: public ::xml_schema::type
    {
      public:
      // count
      //
      typedef ::xml_schema::unsigned_int count_type;
      typedef ::xsd::cxx::tree::traits< count_type, char > count_traits;

      const count_type&
      count () const;

      count_type&
      count ();

      void
      count (const count_type& x);

      // domains
      //
      typedef ::xml_schema::unsigned_int domains_type;
      typedef ::xsd::cxx::tree::traits< domains_type, char > domains_traits;

      const domains_type&
      domains () const;

      domains_type&
      domains ();

      void
      domains (const domains_type& x);

      static domains_type
      domains_default_value ();

      // Constructors.
      //
      DeprecatedClients (const count_type&);

      DeprecatedClients (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      DeprecatedClients (const DeprecatedClients& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      virtual DeprecatedClients*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      DeprecatedClients&
      operator= (const DeprecatedClients& x);

      virtual 
      ~DeprecatedClients ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< count_type > count_;
      ::xsd::cxx::tree::one< domains_type > domains_;
    };

    class DeprecatedCores: public ::xml_schema::type
    {
      public:
      // clients
      //
      typedef ::damaris::model::DeprecatedClients clients_type;
      typedef ::xsd::cxx::tree::traits< clients_type, char > clients_traits;

      const clients_type&
      clients () const;

      clients_type&
      clients ();

      void
      clients (const clients_type& x);

      void
      clients (::std::auto_ptr< clients_type > p);

      // count
      //
      typedef ::xml_schema::unsigned_int count_type;
      typedef ::xsd::cxx::tree::traits< count_type, char > count_traits;

      const count_type&
      count () const;

      count_type&
      count ();

      void
      count (const count_type& x);

      // Constructors.
      //
      DeprecatedCores (const clients_type&,
                       const count_type&);

      DeprecatedCores (::std::auto_ptr< clients_type >,
                       const count_type&);

      DeprecatedCores (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      DeprecatedCores (const DeprecatedCores& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      virtual DeprecatedCores*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      DeprecatedCores&
      operator= (const DeprecatedCores& x);

      virtual 
      ~DeprecatedCores ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< clients_type > clients_;
      ::xsd::cxx::tree::one< count_type > count_;
    };

    class KeyVal: public ::xml_schema::string
    {
      public:
      // key
      //
      typedef ::xml_schema::string key_type;
      typedef ::xsd::cxx::tree::optional< key_type > key_optional;
      typedef ::xsd::cxx::tree::traits< key_type, char > key_traits;

      const key_optional&
      key () const;

      key_optional&
      key ();

      void
      key (const key_type& x);

      void
      key (const key_optional& x);

      void
      key (::std::auto_ptr< key_type > p);

      // Constructors.
      //
      KeyVal ();

      KeyVal (const char*);

      KeyVal (const ::std::string&);

      KeyVal (const ::xml_schema::string&);

      KeyVal (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      KeyVal (const KeyVal& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      virtual KeyVal*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      KeyVal&
      operator= (const KeyVal& x);

      virtual 
      ~KeyVal ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      key_optional key_;
    };

    class Dedicated: public ::xml_schema::type
    {
      public:
      // cores
      //
      typedef ::xml_schema::unsigned_int cores_type;
      typedef ::xsd::cxx::tree::traits< cores_type, char > cores_traits;

      const cores_type&
      cores () const;

      cores_type&
      cores ();

      void
      cores (const cores_type& x);

      static cores_type
      cores_default_value ();

      // nodes
      //
      typedef ::xml_schema::unsigned_int nodes_type;
      typedef ::xsd::cxx::tree::traits< nodes_type, char > nodes_traits;

      const nodes_type&
      nodes () const;

      nodes_type&
      nodes ();

      void
      nodes (const nodes_type& x);

      static nodes_type
      nodes_default_value ();

      // Constructors.
      //
      Dedicated ();

      Dedicated (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      Dedicated (const Dedicated& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      virtual Dedicated*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      Dedicated&
      operator= (const Dedicated& x);

      virtual 
      ~Dedicated ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< cores_type > cores_;
      ::xsd::cxx::tree::one< nodes_type > nodes_;
    };

    class Domains: public ::xml_schema::type
    {
      public:
      // count
      //
      typedef ::xml_schema::unsigned_int count_type;
      typedef ::xsd::cxx::tree::traits< count_type, char > count_traits;

      const count_type&
      count () const;

      count_type&
      count ();

      void
      count (const count_type& x);

      static count_type
      count_default_value ();

      // Constructors.
      //
      Domains ();

      Domains (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      Domains (const Domains& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      virtual Domains*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      Domains&
      operator= (const Domains& x);

      virtual 
      ~Domains ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< count_type > count_;
    };

    class ShmType: public ::xml_schema::string
    {
      public:
      enum value
      {
        posix,
        sysv
      };

      ShmType (value v);

      ShmType (const char* v);

      ShmType (const ::std::string& v);

      ShmType (const ::xml_schema::string& v);

      ShmType (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      ShmType (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      ShmType (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      ShmType (const ShmType& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      virtual ShmType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ShmType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_ShmType_convert ();
      }

      protected:
      value
      _xsd_ShmType_convert () const;

      public:
      static const char* const _xsd_ShmType_literals_[2];
      static const value _xsd_ShmType_indexes_[2];
    };

    class Buffer: public ::xml_schema::type
    {
      public:
      // name
      //
      typedef ::xml_schema::string name_type;
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      const name_type&
      name () const;

      name_type&
      name ();

      void
      name (const name_type& x);

      void
      name (::std::auto_ptr< name_type > p);

      // size
      //
      typedef ::xml_schema::unsigned_int size_type;
      typedef ::xsd::cxx::tree::traits< size_type, char > size_traits;

      const size_type&
      size () const;

      size_type&
      size ();

      void
      size (const size_type& x);

      // type
      //
      typedef ::damaris::model::ShmType type_type;
      typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

      const type_type&
      type () const;

      type_type&
      type ();

      void
      type (const type_type& x);

      void
      type (::std::auto_ptr< type_type > p);

      static const type_type&
      type_default_value ();

      // blocks
      //
      typedef ::xml_schema::unsigned_int blocks_type;
      typedef ::xsd::cxx::tree::traits< blocks_type, char > blocks_traits;

      const blocks_type&
      blocks () const;

      blocks_type&
      blocks ();

      void
      blocks (const blocks_type& x);

      static blocks_type
      blocks_default_value ();

      // enabled
      //
      typedef ::xml_schema::boolean enabled_type;
      typedef ::xsd::cxx::tree::traits< enabled_type, char > enabled_traits;

      const enabled_type&
      enabled () const;

      enabled_type&
      enabled ();

      void
      enabled (const enabled_type& x);

      static enabled_type
      enabled_default_value ();

      // Constructors.
      //
      Buffer (const name_type&,
              const size_type&);

      Buffer (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      Buffer (const Buffer& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      virtual Buffer*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      Buffer&
      operator= (const Buffer& x);

      virtual 
      ~Buffer ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< name_type > name_;
      ::xsd::cxx::tree::one< size_type > size_;
      ::xsd::cxx::tree::one< type_type > type_;
      static const type_type type_default_value_;
      ::xsd::cxx::tree::one< blocks_type > blocks_;
      ::xsd::cxx::tree::one< enabled_type > enabled_;
    };

    class Queue: public ::xml_schema::type
    {
      public:
      // name
      //
      typedef ::xml_schema::string name_type;
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      const name_type&
      name () const;

      name_type&
      name ();

      void
      name (const name_type& x);

      void
      name (::std::auto_ptr< name_type > p);

      // size
      //
      typedef ::xml_schema::unsigned_int size_type;
      typedef ::xsd::cxx::tree::traits< size_type, char > size_traits;

      const size_type&
      size () const;

      size_type&
      size ();

      void
      size (const size_type& x);

      // Constructors.
      //
      Queue (const name_type&,
             const size_type&);

      Queue (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      Queue (const Queue& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      virtual Queue*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      Queue&
      operator= (const Queue& x);

      virtual 
      ~Queue ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< name_type > name_;
      ::xsd::cxx::tree::one< size_type > size_;
    };

    class Architecture: public ::xml_schema::type
    {
      public:
      // domains
      //
      typedef ::damaris::model::Domains domains_type;
      typedef ::xsd::cxx::tree::traits< domains_type, char > domains_traits;

      const domains_type&
      domains () const;

      domains_type&
      domains ();

      void
      domains (const domains_type& x);

      void
      domains (::std::auto_ptr< domains_type > p);

      // dedicated
      //
      typedef ::damaris::model::Dedicated dedicated_type;
      typedef ::xsd::cxx::tree::traits< dedicated_type, char > dedicated_traits;

      const dedicated_type&
      dedicated () const;

      dedicated_type&
      dedicated ();

      void
      dedicated (const dedicated_type& x);

      void
      dedicated (::std::auto_ptr< dedicated_type > p);

      // buffer
      //
      typedef ::damaris::model::Buffer buffer_type;
      typedef ::xsd::cxx::tree::traits< buffer_type, char > buffer_traits;

      const buffer_type&
      buffer () const;

      buffer_type&
      buffer ();

      void
      buffer (const buffer_type& x);

      void
      buffer (::std::auto_ptr< buffer_type > p);

      // queue
      //
      typedef ::damaris::model::Queue queue_type;
      typedef ::xsd::cxx::tree::traits< queue_type, char > queue_traits;

      const queue_type&
      queue () const;

      queue_type&
      queue ();

      void
      queue (const queue_type& x);

      void
      queue (::std::auto_ptr< queue_type > p);

      // name
      //
      typedef ::xml_schema::string name_type;
      typedef ::xsd::cxx::tree::optional< name_type > name_optional;
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      const name_optional&
      name () const;

      name_optional&
      name ();

      void
      name (const name_type& x);

      void
      name (const name_optional& x);

      void
      name (::std::auto_ptr< name_type > p);

      // Constructors.
      //
      Architecture (const domains_type&,
                    const dedicated_type&,
                    const buffer_type&,
                    const queue_type&);

      Architecture (::std::auto_ptr< domains_type >,
                    ::std::auto_ptr< dedicated_type >,
                    ::std::auto_ptr< buffer_type >,
                    ::std::auto_ptr< queue_type >);

      Architecture (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      Architecture (const Architecture& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      virtual Architecture*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      Architecture&
      operator= (const Architecture& x);

      virtual 
      ~Architecture ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< domains_type > domains_;
      ::xsd::cxx::tree::one< dedicated_type > dedicated_;
      ::xsd::cxx::tree::one< buffer_type > buffer_;
      ::xsd::cxx::tree::one< queue_type > queue_;
      name_optional name_;
    };

    class Language: public ::xml_schema::string
    {
      public:
      enum value
      {
        unknown,
        fortran,
        c,
        cpp,
        python
      };

      Language (value v);

      Language (const char* v);

      Language (const ::std::string& v);

      Language (const ::xml_schema::string& v);

      Language (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      Language (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      Language (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      Language (const Language& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      virtual Language*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      Language&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_Language_convert ();
      }

      protected:
      value
      _xsd_Language_convert () const;

      public:
      static const char* const _xsd_Language_literals_[5];
      static const value _xsd_Language_indexes_[5];
    };

    class Type: public ::xml_schema::string
    {
      public:
      enum value
      {
        short_,
        int_,
        integer,
        long_,
        float_,
        real,
        double_,
        char_,
        character,
        string,
        label,
        undefined
      };

      Type (value v);

      Type (const char* v);

      Type (const ::std::string& v);

      Type (const ::xml_schema::string& v);

      Type (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      Type (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      Type (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      Type (const Type& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      virtual Type*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      Type&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_Type_convert ();
      }

      protected:
      value
      _xsd_Type_convert () const;

      public:
      static const char* const _xsd_Type_literals_[12];
      static const value _xsd_Type_indexes_[12];
    };

    class Layout: public ::xml_schema::string
    {
      public:
      // name
      //
      typedef ::xml_schema::string name_type;
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      const name_type&
      name () const;

      name_type&
      name ();

      void
      name (const name_type& x);

      void
      name (::std::auto_ptr< name_type > p);

      // type
      //
      typedef ::damaris::model::Type type_type;
      typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

      const type_type&
      type () const;

      type_type&
      type ();

      void
      type (const type_type& x);

      void
      type (::std::auto_ptr< type_type > p);

      // dimensions
      //
      typedef ::xml_schema::string dimensions_type;
      typedef ::xsd::cxx::tree::traits< dimensions_type, char > dimensions_traits;

      const dimensions_type&
      dimensions () const;

      dimensions_type&
      dimensions ();

      void
      dimensions (const dimensions_type& x);

      void
      dimensions (::std::auto_ptr< dimensions_type > p);

      // global
      //
      typedef ::xml_schema::string global_type;
      typedef ::xsd::cxx::tree::traits< global_type, char > global_traits;

      const global_type&
      global () const;

      global_type&
      global ();

      void
      global (const global_type& x);

      void
      global (::std::auto_ptr< global_type > p);

      static const global_type&
      global_default_value ();

      // ghosts
      //
      typedef ::xml_schema::string ghosts_type;
      typedef ::xsd::cxx::tree::traits< ghosts_type, char > ghosts_traits;

      const ghosts_type&
      ghosts () const;

      ghosts_type&
      ghosts ();

      void
      ghosts (const ghosts_type& x);

      void
      ghosts (::std::auto_ptr< ghosts_type > p);

      static const ghosts_type&
      ghosts_default_value ();

      // language
      //
      typedef ::damaris::model::Language language_type;
      typedef ::xsd::cxx::tree::traits< language_type, char > language_traits;

      const language_type&
      language () const;

      language_type&
      language ();

      void
      language (const language_type& x);

      void
      language (::std::auto_ptr< language_type > p);

      static const language_type&
      language_default_value ();

      // visualizable
      //
      typedef ::xml_schema::boolean visualizable_type;
      typedef ::xsd::cxx::tree::traits< visualizable_type, char > visualizable_traits;

      const visualizable_type&
      visualizable () const;

      visualizable_type&
      visualizable ();

      void
      visualizable (const visualizable_type& x);

      static visualizable_type
      visualizable_default_value ();

      // Constructors.
      //
      Layout (const name_type&,
              const type_type&,
              const dimensions_type&);

      Layout (const char*,
              const name_type&,
              const type_type&,
              const dimensions_type&);

      Layout (const ::std::string&,
              const name_type&,
              const type_type&,
              const dimensions_type&);

      Layout (const ::xml_schema::string&,
              const name_type&,
              const type_type&,
              const dimensions_type&);

      Layout (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      Layout (const Layout& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      virtual Layout*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      Layout&
      operator= (const Layout& x);

      virtual 
      ~Layout ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< name_type > name_;
      ::xsd::cxx::tree::one< type_type > type_;
      ::xsd::cxx::tree::one< dimensions_type > dimensions_;
      ::xsd::cxx::tree::one< global_type > global_;
      static const global_type global_default_value_;
      ::xsd::cxx::tree::one< ghosts_type > ghosts_;
      static const ghosts_type ghosts_default_value_;
      ::xsd::cxx::tree::one< language_type > language_;
      static const language_type language_default_value_;
      ::xsd::cxx::tree::one< visualizable_type > visualizable_;
    };

    class VarType: public ::xml_schema::string
    {
      public:
      enum value
      {
        scalar,
        vector,
        tensor,
        symmetric_tensor,
        material,
        matspecies,
        label,
        array,
        mesh,
        curve
      };

      VarType (value v);

      VarType (const char* v);

      VarType (const ::std::string& v);

      VarType (const ::xml_schema::string& v);

      VarType (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      VarType (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      VarType (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      VarType (const VarType& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      virtual VarType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      VarType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_VarType_convert ();
      }

      protected:
      value
      _xsd_VarType_convert () const;

      public:
      static const char* const _xsd_VarType_literals_[10];
      static const value _xsd_VarType_indexes_[10];
    };

    class VarCentering: public ::xml_schema::string
    {
      public:
      enum value
      {
        nodal,
        zonal
      };

      VarCentering (value v);

      VarCentering (const char* v);

      VarCentering (const ::std::string& v);

      VarCentering (const ::xml_schema::string& v);

      VarCentering (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      VarCentering (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      VarCentering (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      VarCentering (const VarCentering& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      virtual VarCentering*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      VarCentering&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_VarCentering_convert ();
      }

      protected:
      value
      _xsd_VarCentering_convert () const;

      public:
      static const char* const _xsd_VarCentering_literals_[2];
      static const value _xsd_VarCentering_indexes_[2];
    };

    class Variable: public ::xml_schema::string
    {
      public:
      // name
      //
      typedef ::xml_schema::string name_type;
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      const name_type&
      name () const;

      name_type&
      name ();

      void
      name (const name_type& x);

      void
      name (::std::auto_ptr< name_type > p);

      // unit
      //
      typedef ::xml_schema::string unit_type;
      typedef ::xsd::cxx::tree::traits< unit_type, char > unit_traits;

      const unit_type&
      unit () const;

      unit_type&
      unit ();

      void
      unit (const unit_type& x);

      void
      unit (::std::auto_ptr< unit_type > p);

      static const unit_type&
      unit_default_value ();

      // layout
      //
      typedef ::xml_schema::string layout_type;
      typedef ::xsd::cxx::tree::traits< layout_type, char > layout_traits;

      const layout_type&
      layout () const;

      layout_type&
      layout ();

      void
      layout (const layout_type& x);

      void
      layout (::std::auto_ptr< layout_type > p);

      // enabled
      //
      typedef ::xml_schema::boolean enabled_type;
      typedef ::xsd::cxx::tree::traits< enabled_type, char > enabled_traits;

      const enabled_type&
      enabled () const;

      enabled_type&
      enabled ();

      void
      enabled (const enabled_type& x);

      static enabled_type
      enabled_default_value ();

      // mesh
      //
      typedef ::xml_schema::string mesh_type;
      typedef ::xsd::cxx::tree::traits< mesh_type, char > mesh_traits;

      const mesh_type&
      mesh () const;

      mesh_type&
      mesh ();

      void
      mesh (const mesh_type& x);

      void
      mesh (::std::auto_ptr< mesh_type > p);

      static const mesh_type&
      mesh_default_value ();

      // type
      //
      typedef ::damaris::model::VarType type_type;
      typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

      const type_type&
      type () const;

      type_type&
      type ();

      void
      type (const type_type& x);

      void
      type (::std::auto_ptr< type_type > p);

      static const type_type&
      type_default_value ();

      // centering
      //
      typedef ::damaris::model::VarCentering centering_type;
      typedef ::xsd::cxx::tree::traits< centering_type, char > centering_traits;

      const centering_type&
      centering () const;

      centering_type&
      centering ();

      void
      centering (const centering_type& x);

      void
      centering (::std::auto_ptr< centering_type > p);

      static const centering_type&
      centering_default_value ();

      // visualizable
      //
      typedef ::xml_schema::boolean visualizable_type;
      typedef ::xsd::cxx::tree::traits< visualizable_type, char > visualizable_traits;

      const visualizable_type&
      visualizable () const;

      visualizable_type&
      visualizable ();

      void
      visualizable (const visualizable_type& x);

      static visualizable_type
      visualizable_default_value ();

      // time-varying
      //
      typedef ::xml_schema::boolean time_varying_type;
      typedef ::xsd::cxx::tree::traits< time_varying_type, char > time_varying_traits;

      const time_varying_type&
      time_varying () const;

      time_varying_type&
      time_varying ();

      void
      time_varying (const time_varying_type& x);

      static time_varying_type
      time_varying_default_value ();

      // store
      //
      typedef ::xml_schema::string store_type;
      typedef ::xsd::cxx::tree::traits< store_type, char > store_traits;

      const store_type&
      store () const;

      store_type&
      store ();

      void
      store (const store_type& x);

      void
      store (::std::auto_ptr< store_type > p);

      static const store_type&
      store_default_value ();

      // Constructors.
      //
      Variable (const name_type&,
                const layout_type&);

      Variable (const char*,
                const name_type&,
                const layout_type&);

      Variable (const ::std::string&,
                const name_type&,
                const layout_type&);

      Variable (const ::xml_schema::string&,
                const name_type&,
                const layout_type&);

      Variable (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      Variable (const Variable& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      virtual Variable*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      Variable&
      operator= (const Variable& x);

      virtual 
      ~Variable ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< name_type > name_;
      ::xsd::cxx::tree::one< unit_type > unit_;
      static const unit_type unit_default_value_;
      ::xsd::cxx::tree::one< layout_type > layout_;
      ::xsd::cxx::tree::one< enabled_type > enabled_;
      ::xsd::cxx::tree::one< mesh_type > mesh_;
      static const mesh_type mesh_default_value_;
      ::xsd::cxx::tree::one< type_type > type_;
      static const type_type type_default_value_;
      ::xsd::cxx::tree::one< centering_type > centering_;
      static const centering_type centering_default_value_;
      ::xsd::cxx::tree::one< visualizable_type > visualizable_;
      ::xsd::cxx::tree::one< time_varying_type > time_varying_;
      ::xsd::cxx::tree::one< store_type > store_;
      static const store_type store_default_value_;
    };

    class Group: public ::xml_schema::type
    {
      public:
      // layout
      //
      typedef ::damaris::model::Layout layout_type;
      typedef ::xsd::cxx::tree::sequence< layout_type > layout_sequence;
      typedef layout_sequence::iterator layout_iterator;
      typedef layout_sequence::const_iterator layout_const_iterator;
      typedef ::xsd::cxx::tree::traits< layout_type, char > layout_traits;

      const layout_sequence&
      layout () const;

      layout_sequence&
      layout ();

      void
      layout (const layout_sequence& s);

      // variable
      //
      typedef ::damaris::model::Variable variable_type;
      typedef ::xsd::cxx::tree::sequence< variable_type > variable_sequence;
      typedef variable_sequence::iterator variable_iterator;
      typedef variable_sequence::const_iterator variable_const_iterator;
      typedef ::xsd::cxx::tree::traits< variable_type, char > variable_traits;

      const variable_sequence&
      variable () const;

      variable_sequence&
      variable ();

      void
      variable (const variable_sequence& s);

      // group
      //
      typedef ::damaris::model::Group group_type;
      typedef ::xsd::cxx::tree::sequence< group_type > group_sequence;
      typedef group_sequence::iterator group_iterator;
      typedef group_sequence::const_iterator group_const_iterator;
      typedef ::xsd::cxx::tree::traits< group_type, char > group_traits;

      const group_sequence&
      group () const;

      group_sequence&
      group ();

      void
      group (const group_sequence& s);

      // mesh
      //
      typedef ::damaris::model::Mesh mesh_type;
      typedef ::xsd::cxx::tree::sequence< mesh_type > mesh_sequence;
      typedef mesh_sequence::iterator mesh_iterator;
      typedef mesh_sequence::const_iterator mesh_const_iterator;
      typedef ::xsd::cxx::tree::traits< mesh_type, char > mesh_traits;

      const mesh_sequence&
      mesh () const;

      mesh_sequence&
      mesh ();

      void
      mesh (const mesh_sequence& s);

      // curve
      //
      typedef ::damaris::model::Curve curve_type;
      typedef ::xsd::cxx::tree::sequence< curve_type > curve_sequence;
      typedef curve_sequence::iterator curve_iterator;
      typedef curve_sequence::const_iterator curve_const_iterator;
      typedef ::xsd::cxx::tree::traits< curve_type, char > curve_traits;

      const curve_sequence&
      curve () const;

      curve_sequence&
      curve ();

      void
      curve (const curve_sequence& s);

      // name
      //
      typedef ::xml_schema::string name_type;
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      const name_type&
      name () const;

      name_type&
      name ();

      void
      name (const name_type& x);

      void
      name (::std::auto_ptr< name_type > p);

      // enabled
      //
      typedef ::xml_schema::boolean enabled_type;
      typedef ::xsd::cxx::tree::traits< enabled_type, char > enabled_traits;

      const enabled_type&
      enabled () const;

      enabled_type&
      enabled ();

      void
      enabled (const enabled_type& x);

      static enabled_type
      enabled_default_value ();

      // store
      //
      typedef ::xml_schema::string store_type;
      typedef ::xsd::cxx::tree::traits< store_type, char > store_traits;

      const store_type&
      store () const;

      store_type&
      store ();

      void
      store (const store_type& x);

      void
      store (::std::auto_ptr< store_type > p);

      static const store_type&
      store_default_value ();

      // Constructors.
      //
      Group (const name_type&);

      Group (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      Group (const Group& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      virtual Group*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      Group&
      operator= (const Group& x);

      virtual 
      ~Group ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      layout_sequence layout_;
      variable_sequence variable_;
      group_sequence group_;
      mesh_sequence mesh_;
      curve_sequence curve_;
      ::xsd::cxx::tree::one< name_type > name_;
      ::xsd::cxx::tree::one< enabled_type > enabled_;
      ::xsd::cxx::tree::one< store_type > store_;
      static const store_type store_default_value_;
    };

    class Parameter: public ::xml_schema::string
    {
      public:
      // name
      //
      typedef ::xml_schema::ncname name_type;
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      const name_type&
      name () const;

      name_type&
      name ();

      void
      name (const name_type& x);

      void
      name (::std::auto_ptr< name_type > p);

      // type
      //
      typedef ::damaris::model::Type type_type;
      typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

      const type_type&
      type () const;

      type_type&
      type ();

      void
      type (const type_type& x);

      void
      type (::std::auto_ptr< type_type > p);

      // value
      //
      typedef ::xml_schema::string value_type;
      typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

      const value_type&
      value () const;

      value_type&
      value ();

      void
      value (const value_type& x);

      void
      value (::std::auto_ptr< value_type > p);

      // Constructors.
      //
      Parameter (const name_type&,
                 const type_type&,
                 const value_type&);

      Parameter (const char*,
                 const name_type&,
                 const type_type&,
                 const value_type&);

      Parameter (const ::std::string&,
                 const name_type&,
                 const type_type&,
                 const value_type&);

      Parameter (const ::xml_schema::string&,
                 const name_type&,
                 const type_type&,
                 const value_type&);

      Parameter (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      Parameter (const Parameter& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      virtual Parameter*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      Parameter&
      operator= (const Parameter& x);

      virtual 
      ~Parameter ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< name_type > name_;
      ::xsd::cxx::tree::one< type_type > type_;
      ::xsd::cxx::tree::one< value_type > value_;
    };

    class MeshType: public ::xml_schema::string
    {
      public:
      enum value
      {
        unknown,
        rectilinear,
        curvilinear,
        unstructured,
        point,
        csg,
        amr
      };

      MeshType (value v);

      MeshType (const char* v);

      MeshType (const ::std::string& v);

      MeshType (const ::xml_schema::string& v);

      MeshType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      MeshType (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      MeshType (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      MeshType (const MeshType& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      virtual MeshType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      MeshType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_MeshType_convert ();
      }

      protected:
      value
      _xsd_MeshType_convert () const;

      public:
      static const char* const _xsd_MeshType_literals_[7];
      static const value _xsd_MeshType_indexes_[7];
    };

    class Coord: public ::xml_schema::type
    {
      public:
      // name
      //
      typedef ::xml_schema::string name_type;
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      const name_type&
      name () const;

      name_type&
      name ();

      void
      name (const name_type& x);

      void
      name (::std::auto_ptr< name_type > p);

      // unit
      //
      typedef ::xml_schema::string unit_type;
      typedef ::xsd::cxx::tree::traits< unit_type, char > unit_traits;

      const unit_type&
      unit () const;

      unit_type&
      unit ();

      void
      unit (const unit_type& x);

      void
      unit (::std::auto_ptr< unit_type > p);

      static const unit_type&
      unit_default_value ();

      // label
      //
      typedef ::xml_schema::string label_type;
      typedef ::xsd::cxx::tree::traits< label_type, char > label_traits;

      const label_type&
      label () const;

      label_type&
      label ();

      void
      label (const label_type& x);

      void
      label (::std::auto_ptr< label_type > p);

      static const label_type&
      label_default_value ();

      // Constructors.
      //
      Coord (const name_type&);

      Coord (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      Coord (const Coord& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      virtual Coord*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      Coord&
      operator= (const Coord& x);

      virtual 
      ~Coord ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< name_type > name_;
      ::xsd::cxx::tree::one< unit_type > unit_;
      static const unit_type unit_default_value_;
      ::xsd::cxx::tree::one< label_type > label_;
      static const label_type label_default_value_;
    };

    class Mesh: public ::xml_schema::type
    {
      public:
      // coord
      //
      typedef ::damaris::model::Coord coord_type;
      typedef ::xsd::cxx::tree::sequence< coord_type > coord_sequence;
      typedef coord_sequence::iterator coord_iterator;
      typedef coord_sequence::const_iterator coord_const_iterator;
      typedef ::xsd::cxx::tree::traits< coord_type, char > coord_traits;

      const coord_sequence&
      coord () const;

      coord_sequence&
      coord ();

      void
      coord (const coord_sequence& s);

      // name
      //
      typedef ::xml_schema::string name_type;
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      const name_type&
      name () const;

      name_type&
      name ();

      void
      name (const name_type& x);

      void
      name (::std::auto_ptr< name_type > p);

      // type
      //
      typedef ::damaris::model::MeshType type_type;
      typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

      const type_type&
      type () const;

      type_type&
      type ();

      void
      type (const type_type& x);

      void
      type (::std::auto_ptr< type_type > p);

      // topology
      //
      typedef ::xml_schema::unsigned_int topology_type;
      typedef ::xsd::cxx::tree::traits< topology_type, char > topology_traits;

      const topology_type&
      topology () const;

      topology_type&
      topology ();

      void
      topology (const topology_type& x);

      static topology_type
      topology_default_value ();

      // Constructors.
      //
      Mesh (const name_type&,
            const type_type&);

      Mesh (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      Mesh (const Mesh& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      virtual Mesh*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      Mesh&
      operator= (const Mesh& x);

      virtual 
      ~Mesh ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      coord_sequence coord_;
      ::xsd::cxx::tree::one< name_type > name_;
      ::xsd::cxx::tree::one< type_type > type_;
      ::xsd::cxx::tree::one< topology_type > topology_;
    };

    class Curve: public ::xml_schema::type
    {
      public:
      // coord
      //
      typedef ::damaris::model::Coord coord_type;
      typedef ::xsd::cxx::tree::sequence< coord_type > coord_sequence;
      typedef coord_sequence::iterator coord_iterator;
      typedef coord_sequence::const_iterator coord_const_iterator;
      typedef ::xsd::cxx::tree::traits< coord_type, char > coord_traits;

      const coord_sequence&
      coord () const;

      coord_sequence&
      coord ();

      void
      coord (const coord_sequence& s);

      // name
      //
      typedef ::xml_schema::string name_type;
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      const name_type&
      name () const;

      name_type&
      name ();

      void
      name (const name_type& x);

      void
      name (::std::auto_ptr< name_type > p);

      // Constructors.
      //
      Curve (const name_type&);

      Curve (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      Curve (const Curve& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      virtual Curve*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      Curve&
      operator= (const Curve& x);

      virtual 
      ~Curve ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      coord_sequence coord_;
      ::xsd::cxx::tree::one< name_type > name_;
    };

    class Data: public ::xml_schema::type
    {
      public:
      // parameter
      //
      typedef ::damaris::model::Parameter parameter_type;
      typedef ::xsd::cxx::tree::sequence< parameter_type > parameter_sequence;
      typedef parameter_sequence::iterator parameter_iterator;
      typedef parameter_sequence::const_iterator parameter_const_iterator;
      typedef ::xsd::cxx::tree::traits< parameter_type, char > parameter_traits;

      const parameter_sequence&
      parameter () const;

      parameter_sequence&
      parameter ();

      void
      parameter (const parameter_sequence& s);

      // layout
      //
      typedef ::damaris::model::Layout layout_type;
      typedef ::xsd::cxx::tree::sequence< layout_type > layout_sequence;
      typedef layout_sequence::iterator layout_iterator;
      typedef layout_sequence::const_iterator layout_const_iterator;
      typedef ::xsd::cxx::tree::traits< layout_type, char > layout_traits;

      const layout_sequence&
      layout () const;

      layout_sequence&
      layout ();

      void
      layout (const layout_sequence& s);

      // variable
      //
      typedef ::damaris::model::Variable variable_type;
      typedef ::xsd::cxx::tree::sequence< variable_type > variable_sequence;
      typedef variable_sequence::iterator variable_iterator;
      typedef variable_sequence::const_iterator variable_const_iterator;
      typedef ::xsd::cxx::tree::traits< variable_type, char > variable_traits;

      const variable_sequence&
      variable () const;

      variable_sequence&
      variable ();

      void
      variable (const variable_sequence& s);

      // group
      //
      typedef ::damaris::model::Group group_type;
      typedef ::xsd::cxx::tree::sequence< group_type > group_sequence;
      typedef group_sequence::iterator group_iterator;
      typedef group_sequence::const_iterator group_const_iterator;
      typedef ::xsd::cxx::tree::traits< group_type, char > group_traits;

      const group_sequence&
      group () const;

      group_sequence&
      group ();

      void
      group (const group_sequence& s);

      // mesh
      //
      typedef ::damaris::model::Mesh mesh_type;
      typedef ::xsd::cxx::tree::sequence< mesh_type > mesh_sequence;
      typedef mesh_sequence::iterator mesh_iterator;
      typedef mesh_sequence::const_iterator mesh_const_iterator;
      typedef ::xsd::cxx::tree::traits< mesh_type, char > mesh_traits;

      const mesh_sequence&
      mesh () const;

      mesh_sequence&
      mesh ();

      void
      mesh (const mesh_sequence& s);

      // curve
      //
      typedef ::damaris::model::Curve curve_type;
      typedef ::xsd::cxx::tree::sequence< curve_type > curve_sequence;
      typedef curve_sequence::iterator curve_iterator;
      typedef curve_sequence::const_iterator curve_const_iterator;
      typedef ::xsd::cxx::tree::traits< curve_type, char > curve_traits;

      const curve_sequence&
      curve () const;

      curve_sequence&
      curve ();

      void
      curve (const curve_sequence& s);

      // Constructors.
      //
      Data ();

      Data (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      Data (const Data& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      virtual Data*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      Data&
      operator= (const Data& x);

      virtual 
      ~Data ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      parameter_sequence parameter_;
      layout_sequence layout_;
      variable_sequence variable_;
      group_sequence group_;
      mesh_sequence mesh_;
      curve_sequence curve_;
    };

    class Scope: public ::xml_schema::string
    {
      public:
      enum value
      {
        core,
        group,
        bcast
      };

      Scope (value v);

      Scope (const char* v);

      Scope (const ::std::string& v);

      Scope (const ::xml_schema::string& v);

      Scope (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      Scope (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      Scope (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      Scope (const Scope& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      virtual Scope*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      Scope&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_Scope_convert ();
      }

      protected:
      value
      _xsd_Scope_convert () const;

      public:
      static const char* const _xsd_Scope_literals_[3];
      static const value _xsd_Scope_indexes_[3];
    };

    class Exec: public ::xml_schema::string
    {
      public:
      enum value
      {
        local,
        coupled,
        remote
      };

      Exec (value v);

      Exec (const char* v);

      Exec (const ::std::string& v);

      Exec (const ::xml_schema::string& v);

      Exec (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      Exec (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      Exec (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      Exec (const Exec& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      virtual Exec*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      Exec&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_Exec_convert ();
      }

      protected:
      value
      _xsd_Exec_convert () const;

      public:
      static const char* const _xsd_Exec_literals_[3];
      static const value _xsd_Exec_indexes_[3];
    };

    class Event: public ::xml_schema::type
    {
      public:
      // name
      //
      typedef ::xml_schema::string name_type;
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      const name_type&
      name () const;

      name_type&
      name ();

      void
      name (const name_type& x);

      void
      name (::std::auto_ptr< name_type > p);

      // action
      //
      typedef ::xml_schema::string action_type;
      typedef ::xsd::cxx::tree::traits< action_type, char > action_traits;

      const action_type&
      action () const;

      action_type&
      action ();

      void
      action (const action_type& x);

      void
      action (::std::auto_ptr< action_type > p);

      // execution
      //
      typedef ::damaris::model::Exec execution_type;
      typedef ::xsd::cxx::tree::traits< execution_type, char > execution_traits;

      const execution_type&
      execution () const;

      execution_type&
      execution ();

      void
      execution (const execution_type& x);

      void
      execution (::std::auto_ptr< execution_type > p);

      static const execution_type&
      execution_default_value ();

      // library
      //
      typedef ::xml_schema::string library_type;
      typedef ::xsd::cxx::tree::traits< library_type, char > library_traits;

      const library_type&
      library () const;

      library_type&
      library ();

      void
      library (const library_type& x);

      void
      library (::std::auto_ptr< library_type > p);

      static const library_type&
      library_default_value ();

      // scope
      //
      typedef ::damaris::model::Scope scope_type;
      typedef ::xsd::cxx::tree::traits< scope_type, char > scope_traits;

      const scope_type&
      scope () const;

      scope_type&
      scope ();

      void
      scope (const scope_type& x);

      void
      scope (::std::auto_ptr< scope_type > p);

      static const scope_type&
      scope_default_value ();

      // external
      //
      typedef ::xml_schema::boolean external_type;
      typedef ::xsd::cxx::tree::traits< external_type, char > external_traits;

      const external_type&
      external () const;

      external_type&
      external ();

      void
      external (const external_type& x);

      static external_type
      external_default_value ();

      // Constructors.
      //
      Event (const name_type&,
             const action_type&);

      Event (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      Event (const Event& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      virtual Event*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      Event&
      operator= (const Event& x);

      virtual 
      ~Event ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< name_type > name_;
      ::xsd::cxx::tree::one< action_type > action_;
      ::xsd::cxx::tree::one< execution_type > execution_;
      static const execution_type execution_default_value_;
      ::xsd::cxx::tree::one< library_type > library_;
      static const library_type library_default_value_;
      ::xsd::cxx::tree::one< scope_type > scope_;
      static const scope_type scope_default_value_;
      ::xsd::cxx::tree::one< external_type > external_;
    };

    class Script: public ::xml_schema::type
    {
      public:
      // name
      //
      typedef ::xml_schema::string name_type;
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      const name_type&
      name () const;

      name_type&
      name ();

      void
      name (const name_type& x);

      void
      name (::std::auto_ptr< name_type > p);

      // file
      //
      typedef ::xml_schema::string file_type;
      typedef ::xsd::cxx::tree::traits< file_type, char > file_traits;

      const file_type&
      file () const;

      file_type&
      file ();

      void
      file (const file_type& x);

      void
      file (::std::auto_ptr< file_type > p);

      // execution
      //
      typedef ::damaris::model::Exec execution_type;
      typedef ::xsd::cxx::tree::traits< execution_type, char > execution_traits;

      const execution_type&
      execution () const;

      execution_type&
      execution ();

      void
      execution (const execution_type& x);

      void
      execution (::std::auto_ptr< execution_type > p);

      static const execution_type&
      execution_default_value ();

      // language
      //
      typedef ::damaris::model::Language language_type;
      typedef ::xsd::cxx::tree::traits< language_type, char > language_traits;

      const language_type&
      language () const;

      language_type&
      language ();

      void
      language (const language_type& x);

      void
      language (::std::auto_ptr< language_type > p);

      // scope
      //
      typedef ::damaris::model::Scope scope_type;
      typedef ::xsd::cxx::tree::traits< scope_type, char > scope_traits;

      const scope_type&
      scope () const;

      scope_type&
      scope ();

      void
      scope (const scope_type& x);

      void
      scope (::std::auto_ptr< scope_type > p);

      static const scope_type&
      scope_default_value ();

      // external
      //
      typedef ::xml_schema::boolean external_type;
      typedef ::xsd::cxx::tree::traits< external_type, char > external_traits;

      const external_type&
      external () const;

      external_type&
      external ();

      void
      external (const external_type& x);

      static external_type
      external_default_value ();

      // Constructors.
      //
      Script (const name_type&,
              const file_type&,
              const language_type&);

      Script (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      Script (const Script& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      virtual Script*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      Script&
      operator= (const Script& x);

      virtual 
      ~Script ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< name_type > name_;
      ::xsd::cxx::tree::one< file_type > file_;
      ::xsd::cxx::tree::one< execution_type > execution_;
      static const execution_type execution_default_value_;
      ::xsd::cxx::tree::one< language_type > language_;
      ::xsd::cxx::tree::one< scope_type > scope_;
      static const scope_type scope_default_value_;
      ::xsd::cxx::tree::one< external_type > external_;
    };

    class Exception: public ::xml_schema::type
    {
      public:
      // event
      //
      typedef ::xml_schema::string event_type;
      typedef ::xsd::cxx::tree::optional< event_type > event_optional;
      typedef ::xsd::cxx::tree::traits< event_type, char > event_traits;

      const event_optional&
      event () const;

      event_optional&
      event ();

      void
      event (const event_type& x);

      void
      event (const event_optional& x);

      void
      event (::std::auto_ptr< event_type > p);

      // script
      //
      typedef ::xml_schema::string script_type;
      typedef ::xsd::cxx::tree::optional< script_type > script_optional;
      typedef ::xsd::cxx::tree::traits< script_type, char > script_traits;

      const script_optional&
      script () const;

      script_optional&
      script ();

      void
      script (const script_type& x);

      void
      script (const script_optional& x);

      void
      script (::std::auto_ptr< script_type > p);

      // Constructors.
      //
      Exception ();

      Exception (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      Exception (const Exception& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      virtual Exception*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      Exception&
      operator= (const Exception& x);

      virtual 
      ~Exception ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      event_optional event_;
      script_optional script_;
    };

    class VisitParam: public ::xml_schema::type
    {
      public:
      // path
      //
      typedef ::xml_schema::string path_type;
      typedef ::xsd::cxx::tree::optional< path_type > path_optional;
      typedef ::xsd::cxx::tree::traits< path_type, char > path_traits;

      const path_optional&
      path () const;

      path_optional&
      path ();

      void
      path (const path_type& x);

      void
      path (const path_optional& x);

      void
      path (::std::auto_ptr< path_type > p);

      // options
      //
      typedef ::xml_schema::string options_type;
      typedef ::xsd::cxx::tree::optional< options_type > options_optional;
      typedef ::xsd::cxx::tree::traits< options_type, char > options_traits;

      const options_optional&
      options () const;

      options_optional&
      options ();

      void
      options (const options_type& x);

      void
      options (const options_optional& x);

      void
      options (::std::auto_ptr< options_type > p);

      // update-frequency
      //
      typedef ::xml_schema::unsigned_int update_frequency_type;
      typedef ::xsd::cxx::tree::traits< update_frequency_type, char > update_frequency_traits;

      const update_frequency_type&
      update_frequency () const;

      update_frequency_type&
      update_frequency ();

      void
      update_frequency (const update_frequency_type& x);

      static update_frequency_type
      update_frequency_default_value ();

      // Constructors.
      //
      VisitParam ();

      VisitParam (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      VisitParam (const VisitParam& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      virtual VisitParam*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      VisitParam&
      operator= (const VisitParam& x);

      virtual 
      ~VisitParam ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      path_optional path_;
      options_optional options_;
      ::xsd::cxx::tree::one< update_frequency_type > update_frequency_;
    };

    class PythonParam: public ::xml_schema::type
    {
      public:
      // path
      //
      typedef ::xml_schema::string path_type;
      typedef ::xsd::cxx::tree::traits< path_type, char > path_traits;

      const path_type&
      path () const;

      path_type&
      path ();

      void
      path (const path_type& x);

      void
      path (::std::auto_ptr< path_type > p);

      // home
      //
      typedef ::xml_schema::string home_type;
      typedef ::xsd::cxx::tree::traits< home_type, char > home_traits;

      const home_type&
      home () const;

      home_type&
      home ();

      void
      home (const home_type& x);

      void
      home (::std::auto_ptr< home_type > p);

      // Constructors.
      //
      PythonParam (const path_type&,
                   const home_type&);

      PythonParam (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      PythonParam (const PythonParam& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      virtual PythonParam*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PythonParam&
      operator= (const PythonParam& x);

      virtual 
      ~PythonParam ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< path_type > path_;
      ::xsd::cxx::tree::one< home_type > home_;
    };

    class Actions: public ::xml_schema::type
    {
      public:
      // event
      //
      typedef ::damaris::model::Event event_type;
      typedef ::xsd::cxx::tree::sequence< event_type > event_sequence;
      typedef event_sequence::iterator event_iterator;
      typedef event_sequence::const_iterator event_const_iterator;
      typedef ::xsd::cxx::tree::traits< event_type, char > event_traits;

      const event_sequence&
      event () const;

      event_sequence&
      event ();

      void
      event (const event_sequence& s);

      // script
      //
      typedef ::damaris::model::Script script_type;
      typedef ::xsd::cxx::tree::sequence< script_type > script_sequence;
      typedef script_sequence::iterator script_iterator;
      typedef script_sequence::const_iterator script_const_iterator;
      typedef ::xsd::cxx::tree::traits< script_type, char > script_traits;

      const script_sequence&
      script () const;

      script_sequence&
      script ();

      void
      script (const script_sequence& s);

      // error
      //
      typedef ::damaris::model::Exception error_type;
      typedef ::xsd::cxx::tree::sequence< error_type > error_sequence;
      typedef error_sequence::iterator error_iterator;
      typedef error_sequence::const_iterator error_const_iterator;
      typedef ::xsd::cxx::tree::traits< error_type, char > error_traits;

      const error_sequence&
      error () const;

      error_sequence&
      error ();

      void
      error (const error_sequence& s);

      // Constructors.
      //
      Actions ();

      Actions (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      Actions (const Actions& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      virtual Actions*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      Actions&
      operator= (const Actions& x);

      virtual 
      ~Actions ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      event_sequence event_;
      script_sequence script_;
      error_sequence error_;
    };

    class StoreType: public ::xml_schema::string
    {
      public:
      enum value
      {
        null,
        HDF5
      };

      StoreType (value v);

      StoreType (const char* v);

      StoreType (const ::std::string& v);

      StoreType (const ::xml_schema::string& v);

      StoreType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      StoreType (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      StoreType (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      StoreType (const StoreType& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      virtual StoreType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      StoreType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_StoreType_convert ();
      }

      protected:
      value
      _xsd_StoreType_convert () const;

      public:
      static const char* const _xsd_StoreType_literals_[2];
      static const value _xsd_StoreType_indexes_[2];
    };

    class Store: public ::xml_schema::type
    {
      public:
      // option
      //
      typedef ::damaris::model::KeyVal option_type;
      typedef ::xsd::cxx::tree::sequence< option_type > option_sequence;
      typedef option_sequence::iterator option_iterator;
      typedef option_sequence::const_iterator option_const_iterator;
      typedef ::xsd::cxx::tree::traits< option_type, char > option_traits;

      const option_sequence&
      option () const;

      option_sequence&
      option ();

      void
      option (const option_sequence& s);

      // name
      //
      typedef ::xml_schema::string name_type;
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      const name_type&
      name () const;

      name_type&
      name ();

      void
      name (const name_type& x);

      void
      name (::std::auto_ptr< name_type > p);

      // type
      //
      typedef ::damaris::model::StoreType type_type;
      typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

      const type_type&
      type () const;

      type_type&
      type ();

      void
      type (const type_type& x);

      void
      type (::std::auto_ptr< type_type > p);

      // frequency
      //
      typedef ::xml_schema::unsigned_int frequency_type;
      typedef ::xsd::cxx::tree::traits< frequency_type, char > frequency_traits;

      const frequency_type&
      frequency () const;

      frequency_type&
      frequency ();

      void
      frequency (const frequency_type& x);

      static frequency_type
      frequency_default_value ();

      // Constructors.
      //
      Store (const name_type&,
             const type_type&);

      Store (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      Store (const Store& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      virtual Store*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      Store&
      operator= (const Store& x);

      virtual 
      ~Store ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      option_sequence option_;
      ::xsd::cxx::tree::one< name_type > name_;
      ::xsd::cxx::tree::one< type_type > type_;
      ::xsd::cxx::tree::one< frequency_type > frequency_;
    };

    class Storage: public ::xml_schema::type
    {
      public:
      // store
      //
      typedef ::damaris::model::Store store_type;
      typedef ::xsd::cxx::tree::sequence< store_type > store_sequence;
      typedef store_sequence::iterator store_iterator;
      typedef store_sequence::const_iterator store_const_iterator;
      typedef ::xsd::cxx::tree::traits< store_type, char > store_traits;

      const store_sequence&
      store () const;

      store_sequence&
      store ();

      void
      store (const store_sequence& s);

      // Constructors.
      //
      Storage ();

      Storage (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      Storage (const Storage& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      virtual Storage*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      Storage&
      operator= (const Storage& x);

      virtual 
      ~Storage ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      store_sequence store_;
    };

    class LogLevelType: public ::xml_schema::string
    {
      public:
      enum value
      {
        trace,
        debug,
        info,
        warning,
        error,
        fatal
      };

      LogLevelType (value v);

      LogLevelType (const char* v);

      LogLevelType (const ::std::string& v);

      LogLevelType (const ::xml_schema::string& v);

      LogLevelType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      LogLevelType (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      LogLevelType (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      LogLevelType (const LogLevelType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      virtual LogLevelType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      LogLevelType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_LogLevelType_convert ();
      }

      protected:
      value
      _xsd_LogLevelType_convert () const;

      public:
      static const char* const _xsd_LogLevelType_literals_[6];
      static const value _xsd_LogLevelType_indexes_[6];
    };

    class Log: public ::xml_schema::type
    {
      public:
      // FileName
      //
      typedef ::xml_schema::string FileName_type;
      typedef ::xsd::cxx::tree::traits< FileName_type, char > FileName_traits;

      const FileName_type&
      FileName () const;

      FileName_type&
      FileName ();

      void
      FileName (const FileName_type& x);

      void
      FileName (::std::auto_ptr< FileName_type > p);

      // RotationSize
      //
      typedef ::xml_schema::unsigned_int RotationSize_type;
      typedef ::xsd::cxx::tree::traits< RotationSize_type, char > RotationSize_traits;

      const RotationSize_type&
      RotationSize () const;

      RotationSize_type&
      RotationSize ();

      void
      RotationSize (const RotationSize_type& x);

      // LogFormat
      //
      typedef ::xml_schema::string LogFormat_type;
      typedef ::xsd::cxx::tree::traits< LogFormat_type, char > LogFormat_traits;

      const LogFormat_type&
      LogFormat () const;

      LogFormat_type&
      LogFormat ();

      void
      LogFormat (const LogFormat_type& x);

      void
      LogFormat (::std::auto_ptr< LogFormat_type > p);

      // LogLevel
      //
      typedef ::damaris::model::LogLevelType LogLevel_type;
      typedef ::xsd::cxx::tree::traits< LogLevel_type, char > LogLevel_traits;

      const LogLevel_type&
      LogLevel () const;

      LogLevel_type&
      LogLevel ();

      void
      LogLevel (const LogLevel_type& x);

      void
      LogLevel (::std::auto_ptr< LogLevel_type > p);

      // Constructors.
      //
      Log (const FileName_type&,
           const RotationSize_type&,
           const LogFormat_type&,
           const LogLevel_type&);

      Log (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

      Log (const Log& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

      virtual Log*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      Log&
      operator= (const Log& x);

      virtual 
      ~Log ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< FileName_type > FileName_;
      ::xsd::cxx::tree::one< RotationSize_type > RotationSize_;
      ::xsd::cxx::tree::one< LogFormat_type > LogFormat_;
      ::xsd::cxx::tree::one< LogLevel_type > LogLevel_;
    };

    class Simulation: public ::xml_schema::type
    {
      public:
      // architecture
      //
      typedef ::damaris::model::Architecture architecture_type;
      typedef ::xsd::cxx::tree::traits< architecture_type, char > architecture_traits;

      const architecture_type&
      architecture () const;

      architecture_type&
      architecture ();

      void
      architecture (const architecture_type& x);

      void
      architecture (::std::auto_ptr< architecture_type > p);

      // data
      //
      typedef ::damaris::model::Data data_type;
      typedef ::xsd::cxx::tree::traits< data_type, char > data_traits;

      const data_type&
      data () const;

      data_type&
      data ();

      void
      data (const data_type& x);

      void
      data (::std::auto_ptr< data_type > p);

      // storage
      //
      typedef ::damaris::model::Storage storage_type;
      typedef ::xsd::cxx::tree::optional< storage_type > storage_optional;
      typedef ::xsd::cxx::tree::traits< storage_type, char > storage_traits;

      const storage_optional&
      storage () const;

      storage_optional&
      storage ();

      void
      storage (const storage_type& x);

      void
      storage (const storage_optional& x);

      void
      storage (::std::auto_ptr< storage_type > p);

      // actions
      //
      typedef ::damaris::model::Actions actions_type;
      typedef ::xsd::cxx::tree::traits< actions_type, char > actions_traits;

      const actions_type&
      actions () const;

      actions_type&
      actions ();

      void
      actions (const actions_type& x);

      void
      actions (::std::auto_ptr< actions_type > p);

      // python
      //
      typedef ::damaris::model::PythonParam python_type;
      typedef ::xsd::cxx::tree::optional< python_type > python_optional;
      typedef ::xsd::cxx::tree::traits< python_type, char > python_traits;

      const python_optional&
      python () const;

      python_optional&
      python ();

      void
      python (const python_type& x);

      void
      python (const python_optional& x);

      void
      python (::std::auto_ptr< python_type > p);

      // visit
      //
      typedef ::damaris::model::VisitParam visit_type;
      typedef ::xsd::cxx::tree::optional< visit_type > visit_optional;
      typedef ::xsd::cxx::tree::traits< visit_type, char > visit_traits;

      const visit_optional&
      visit () const;

      visit_optional&
      visit ();

      void
      visit (const visit_type& x);

      void
      visit (const visit_optional& x);

      void
      visit (::std::auto_ptr< visit_type > p);

      // log
      //
      typedef ::damaris::model::Log log_type;
      typedef ::xsd::cxx::tree::optional< log_type > log_optional;
      typedef ::xsd::cxx::tree::traits< log_type, char > log_traits;

      const log_optional&
      log () const;

      log_optional&
      log ();

      void
      log (const log_type& x);

      void
      log (const log_optional& x);

      void
      log (::std::auto_ptr< log_type > p);

      // name
      //
      typedef ::xml_schema::string name_type;
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      const name_type&
      name () const;

      name_type&
      name ();

      void
      name (const name_type& x);

      void
      name (::std::auto_ptr< name_type > p);

      // language
      //
      typedef ::damaris::model::Language language_type;
      typedef ::xsd::cxx::tree::traits< language_type, char > language_traits;

      const language_type&
      language () const;

      language_type&
      language ();

      void
      language (const language_type& x);

      void
      language (::std::auto_ptr< language_type > p);

      static const language_type&
      language_default_value ();

      // Constructors.
      //
      Simulation (const architecture_type&,
                  const data_type&,
                  const actions_type&,
                  const name_type&);

      Simulation (::std::auto_ptr< architecture_type >,
                  ::std::auto_ptr< data_type >,
                  ::std::auto_ptr< actions_type >,
                  const name_type&);

      Simulation (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      Simulation (const Simulation& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      virtual Simulation*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      Simulation&
      operator= (const Simulation& x);

      virtual 
      ~Simulation ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< architecture_type > architecture_;
      ::xsd::cxx::tree::one< data_type > data_;
      storage_optional storage_;
      ::xsd::cxx::tree::one< actions_type > actions_;
      python_optional python_;
      visit_optional visit_;
      log_optional log_;
      ::xsd::cxx::tree::one< name_type > name_;
      ::xsd::cxx::tree::one< language_type > language_;
      static const language_type language_default_value_;
    };
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace damaris
{
  namespace model
  {
    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::damaris::model::Simulation >
    simulation (const ::std::string& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::damaris::model::Simulation >
    simulation (const ::std::string& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::damaris::model::Simulation >
    simulation (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::damaris::model::Simulation >
    simulation (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::damaris::model::Simulation >
    simulation (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::damaris::model::Simulation >
    simulation (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::damaris::model::Simulation >
    simulation (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::damaris::model::Simulation >
    simulation (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::damaris::model::Simulation >
    simulation (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::damaris::model::Simulation >
    simulation (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::damaris::model::Simulation >
    simulation (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::damaris::model::Simulation >
    simulation (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::damaris::model::Simulation >
    simulation (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::damaris::model::Simulation >
    simulation (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace damaris
{
  namespace model
  {
    void
    operator<< (::xercesc::DOMElement&, const DeprecatedClients&);

    void
    operator<< (::xercesc::DOMElement&, const DeprecatedCores&);

    void
    operator<< (::xercesc::DOMElement&, const KeyVal&);

    void
    operator<< (::xercesc::DOMElement&, const Dedicated&);

    void
    operator<< (::xercesc::DOMElement&, const Domains&);

    void
    operator<< (::xercesc::DOMElement&, const ShmType&);

    void
    operator<< (::xercesc::DOMAttr&, const ShmType&);

    void
    operator<< (::xml_schema::list_stream&,
                const ShmType&);

    void
    operator<< (::xercesc::DOMElement&, const Buffer&);

    void
    operator<< (::xercesc::DOMElement&, const Queue&);

    void
    operator<< (::xercesc::DOMElement&, const Architecture&);

    void
    operator<< (::xercesc::DOMElement&, const Language&);

    void
    operator<< (::xercesc::DOMAttr&, const Language&);

    void
    operator<< (::xml_schema::list_stream&,
                const Language&);

    void
    operator<< (::xercesc::DOMElement&, const Type&);

    void
    operator<< (::xercesc::DOMAttr&, const Type&);

    void
    operator<< (::xml_schema::list_stream&,
                const Type&);

    void
    operator<< (::xercesc::DOMElement&, const Layout&);

    void
    operator<< (::xercesc::DOMElement&, const VarType&);

    void
    operator<< (::xercesc::DOMAttr&, const VarType&);

    void
    operator<< (::xml_schema::list_stream&,
                const VarType&);

    void
    operator<< (::xercesc::DOMElement&, const VarCentering&);

    void
    operator<< (::xercesc::DOMAttr&, const VarCentering&);

    void
    operator<< (::xml_schema::list_stream&,
                const VarCentering&);

    void
    operator<< (::xercesc::DOMElement&, const Variable&);

    void
    operator<< (::xercesc::DOMElement&, const Group&);

    void
    operator<< (::xercesc::DOMElement&, const Parameter&);

    void
    operator<< (::xercesc::DOMElement&, const MeshType&);

    void
    operator<< (::xercesc::DOMAttr&, const MeshType&);

    void
    operator<< (::xml_schema::list_stream&,
                const MeshType&);

    void
    operator<< (::xercesc::DOMElement&, const Coord&);

    void
    operator<< (::xercesc::DOMElement&, const Mesh&);

    void
    operator<< (::xercesc::DOMElement&, const Curve&);

    void
    operator<< (::xercesc::DOMElement&, const Data&);

    void
    operator<< (::xercesc::DOMElement&, const Scope&);

    void
    operator<< (::xercesc::DOMAttr&, const Scope&);

    void
    operator<< (::xml_schema::list_stream&,
                const Scope&);

    void
    operator<< (::xercesc::DOMElement&, const Exec&);

    void
    operator<< (::xercesc::DOMAttr&, const Exec&);

    void
    operator<< (::xml_schema::list_stream&,
                const Exec&);

    void
    operator<< (::xercesc::DOMElement&, const Event&);

    void
    operator<< (::xercesc::DOMElement&, const Script&);

    void
    operator<< (::xercesc::DOMElement&, const Exception&);

    void
    operator<< (::xercesc::DOMElement&, const VisitParam&);

    void
    operator<< (::xercesc::DOMElement&, const PythonParam&);

    void
    operator<< (::xercesc::DOMElement&, const Actions&);

    void
    operator<< (::xercesc::DOMElement&, const StoreType&);

    void
    operator<< (::xercesc::DOMAttr&, const StoreType&);

    void
    operator<< (::xml_schema::list_stream&,
                const StoreType&);

    void
    operator<< (::xercesc::DOMElement&, const Store&);

    void
    operator<< (::xercesc::DOMElement&, const Storage&);

    void
    operator<< (::xercesc::DOMElement&, const LogLevelType&);

    void
    operator<< (::xercesc::DOMAttr&, const LogLevelType&);

    void
    operator<< (::xml_schema::list_stream&,
                const LogLevelType&);

    void
    operator<< (::xercesc::DOMElement&, const Log&);

    void
    operator<< (::xercesc::DOMElement&, const Simulation&);

    // Serialize to std::ostream.
    //

    void
    simulation (::std::ostream& os,
                const ::damaris::model::Simulation& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

    void
    simulation (::std::ostream& os,
                const ::damaris::model::Simulation& x, 
                ::xml_schema::error_handler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

    void
    simulation (::std::ostream& os,
                const ::damaris::model::Simulation& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    simulation (::xercesc::XMLFormatTarget& ft,
                const ::damaris::model::Simulation& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

    void
    simulation (::xercesc::XMLFormatTarget& ft,
                const ::damaris::model::Simulation& x, 
                ::xml_schema::error_handler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

    void
    simulation (::xercesc::XMLFormatTarget& ft,
                const ::damaris::model::Simulation& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    simulation (::xercesc::DOMDocument& d,
                const ::damaris::model::Simulation& x,
                ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    simulation (const ::damaris::model::Simulation& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                ::xml_schema::flags f = 0);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // MODEL_HXX
