// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MODELSAMPLE_ROSS_DAMARIS_SAMPLE_H_
#define FLATBUFFERS_GENERATED_MODELSAMPLE_ROSS_DAMARIS_SAMPLE_H_

#include "flatbuffers/flatbuffers.h"

namespace ross_damaris {
namespace sample {

struct ModelData;
struct ModelDataT;

inline const flatbuffers::TypeTable *ModelDataTypeTable();

struct ModelDataT : public flatbuffers::NativeTable {
  typedef ModelData TableType;
  int32_t model_ref;
  ModelDataT()
      : model_ref(0) {
  }
};

struct ModelData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ModelDataT NativeTableType;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return ModelDataTypeTable();
  }
  enum {
    VT_MODEL_REF = 4
  };
  int32_t model_ref() const {
    return GetField<int32_t>(VT_MODEL_REF, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_MODEL_REF) &&
           verifier.EndTable();
  }
  ModelDataT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ModelDataT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<ModelData> Pack(flatbuffers::FlatBufferBuilder &_fbb, const ModelDataT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ModelDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_model_ref(int32_t model_ref) {
    fbb_.AddElement<int32_t>(ModelData::VT_MODEL_REF, model_ref, 0);
  }
  explicit ModelDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ModelDataBuilder &operator=(const ModelDataBuilder &);
  flatbuffers::Offset<ModelData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ModelData>(end);
    return o;
  }
};

inline flatbuffers::Offset<ModelData> CreateModelData(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t model_ref = 0) {
  ModelDataBuilder builder_(_fbb);
  builder_.add_model_ref(model_ref);
  return builder_.Finish();
}

flatbuffers::Offset<ModelData> CreateModelData(flatbuffers::FlatBufferBuilder &_fbb, const ModelDataT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline ModelDataT *ModelData::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new ModelDataT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void ModelData::UnPackTo(ModelDataT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = model_ref(); _o->model_ref = _e; };
}

inline flatbuffers::Offset<ModelData> ModelData::Pack(flatbuffers::FlatBufferBuilder &_fbb, const ModelDataT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateModelData(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<ModelData> CreateModelData(flatbuffers::FlatBufferBuilder &_fbb, const ModelDataT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const ModelDataT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _model_ref = _o->model_ref;
  return ross_damaris::sample::CreateModelData(
      _fbb,
      _model_ref);
}

inline const flatbuffers::TypeTable *ModelDataTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_INT, 0, -1 }
  };
  static const char * const names[] = {
    "model_ref"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 1, type_codes, nullptr, nullptr, names
  };
  return &tt;
}

inline const ross_damaris::sample::ModelData *GetModelData(const void *buf) {
  return flatbuffers::GetRoot<ross_damaris::sample::ModelData>(buf);
}

inline const ross_damaris::sample::ModelData *GetSizePrefixedModelData(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<ross_damaris::sample::ModelData>(buf);
}

inline bool VerifyModelDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ross_damaris::sample::ModelData>(nullptr);
}

inline bool VerifySizePrefixedModelDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ross_damaris::sample::ModelData>(nullptr);
}

inline void FinishModelDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ross_damaris::sample::ModelData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedModelDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ross_damaris::sample::ModelData> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<ModelDataT> UnPackModelData(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<ModelDataT>(GetModelData(buf)->UnPack(res));
}

}  // namespace sample
}  // namespace ross_damaris

#endif  // FLATBUFFERS_GENERATED_MODELSAMPLE_ROSS_DAMARIS_SAMPLE_H_
